# -*- coding: utf-8 -*-
# Generated by Django 1.11.5 on 2018-05-14 09:48
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import functools
import uuid
import xm2cloud_auth.common.db.models
import xm2cloud_auth.common.storage


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('create_time', models.DateTimeField(auto_created=True, blank=True, default=django.utils.timezone.now)),
                ('address', models.TextField(blank=True, default='')),
                ('phone', models.CharField(blank=True, default='', max_length=11)),
                ('photo', models.CharField(blank=True, default='', max_length=255)),
                ('thumbs', models.CharField(blank=True, default='', max_length=255)),
                ('telephone', models.CharField(blank=True, default='', max_length=32)),
                ('city', models.CharField(blank=True, default='\u676d\u5dde\u5e02', max_length=32)),
                ('mfa_protect_is_enable', models.SmallIntegerField(blank=True, default=0)),
                ('province', models.CharField(blank=True, default='\u6d59\u6c5f\u7701', max_length=32)),
                ('district', models.CharField(blank=True, default='\u5bcc\u9633\u533a', max_length=32)),
                ('mfa_secret_key', models.CharField(blank=True, default='', max_length=16)),
                ('nationality', models.CharField(blank=True, default='\u4e2d\u56fd', max_length=32)),
                ('mfa_gotp_qurls', models.CharField(blank=True, default='', max_length=255)),
                ('update_time', models.DateTimeField(auto_now_add=True)),
                ('avatar', xm2cloud_auth.common.db.models.StrictedImageFileField(blank=True, upload_to=functools.partial(xm2cloud_auth.common.storage.upload_to, *('avatars',), **{}), validators=[functools.partial(xm2cloud_auth.common.db.models.valid_content_type, *(None, {'blank': 'This field cannot be blank.', 'invalid_choice': 'Value %(value)r is not a valid choice.', b'invalid_content_type': 'ContentType %(content_type)s is not allowed.', b'invalid_image_size': 'Out of the allowed image size 200x200.', b'invalid_upload_size': 'Out of the allowd upload size %(max_upload_size)s.', 'null': 'This field cannot be null.', 'unique': '%(model_name)s with this %(field_label)s already exists.', 'unique_for_date': '%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s.'}), **{}), functools.partial(xm2cloud_auth.common.db.models.valid_image_size, *(200, 200, {'blank': 'This field cannot be blank.', 'invalid_choice': 'Value %(value)r is not a valid choice.', b'invalid_content_type': 'ContentType %(content_type)s is not allowed.', b'invalid_image_size': 'Out of the allowed image size 200x200.', b'invalid_upload_size': 'Out of the allowd upload size %(max_upload_size)s.', 'null': 'This field cannot be null.', 'unique': '%(model_name)s with this %(field_label)s already exists.', 'unique_for_date': '%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s.'}), **{}), functools.partial(xm2cloud_auth.common.db.models.valid_upload_size, *(None, {'blank': 'This field cannot be blank.', 'invalid_choice': 'Value %(value)r is not a valid choice.', b'invalid_content_type': 'ContentType %(content_type)s is not allowed.', b'invalid_image_size': 'Out of the allowed image size 200x200.', b'invalid_upload_size': 'Out of the allowd upload size %(max_upload_size)s.', 'null': 'This field cannot be null.', 'unique': '%(model_name)s with this %(field_label)s already exists.', 'unique_for_date': '%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s.'}), **{}), functools.partial(xm2cloud_auth.common.db.models.valid_content_type, *(None, {'blank': 'This field cannot be blank.', 'invalid_choice': 'Value %(value)r is not a valid choice.', b'invalid_content_type': 'ContentType %(content_type)s is not allowed.', b'invalid_image_size': 'Out of the allowed image size 200x200.', b'invalid_upload_size': 'Out of the allowd upload size %(max_upload_size)s.', 'null': 'This field cannot be null.', 'unique': '%(model_name)s with this %(field_label)s already exists.', 'unique_for_date': '%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s.'}), **{}), functools.partial(xm2cloud_auth.common.db.models.valid_image_size, *(200, 200, {'blank': 'This field cannot be blank.', 'invalid_choice': 'Value %(value)r is not a valid choice.', b'invalid_content_type': 'ContentType %(content_type)s is not allowed.', b'invalid_image_size': 'Out of the allowed image size 200x200.', b'invalid_upload_size': 'Out of the allowd upload size %(max_upload_size)s.', 'null': 'This field cannot be null.', 'unique': '%(model_name)s with this %(field_label)s already exists.', 'unique_for_date': '%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s.'}), **{}), functools.partial(xm2cloud_auth.common.db.models.valid_upload_size, *(None, {'blank': 'This field cannot be blank.', 'invalid_choice': 'Value %(value)r is not a valid choice.', b'invalid_content_type': 'ContentType %(content_type)s is not allowed.', b'invalid_image_size': 'Out of the allowed image size 200x200.', b'invalid_upload_size': 'Out of the allowd upload size %(max_upload_size)s.', 'null': 'This field cannot be null.', 'unique': '%(model_name)s with this %(field_label)s already exists.', 'unique_for_date': '%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s.'}), **{})])),
                ('operate_protect_intensity', models.CharField(blank=True, choices=[('default', 'default'), ('force', 'force')], default='default', max_length=32)),
                ('operate_protect_method', models.CharField(blank=True, choices=[('phone', 'phone'), ('email', 'email'), ('mfa', 'mfa')], default='email', max_length=32)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
